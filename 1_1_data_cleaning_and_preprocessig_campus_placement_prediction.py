# -*- coding: utf-8 -*-
"""1_1_Data_Cleaning_and_Preprocessig_Campus_Placement_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yrEHh4wukV4CrtvoUp8UTGA-FvTO5lE1
"""

from google.colab import drive
drive.mount('/content/drive')

pip install cvxpy

pip install wheel

pip install gunicorn

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import ast

from wordcloud import WordCloud, STOPWORDS


from joblib import dump,load
#%matplotlib notebook
# %matplotlib inline

import warnings
warnings.filterwarnings('ignore')



from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
from sklearn.ensemble import RandomForestClassifier
# %matplotlib inline

df = pd.read_csv("/content/drive/MyDrive/campus placement/ml-with-python-course-project 2/train.csv")

df

df.info()

# check null values in df
df.isnull().sum()

"""Dataset has 1 integer, 8 object and 6 float datatypes.
No other columns have missing values except salary column. There are 148 non-null values in salary column i.e. 67 null values which shows that 67 candidates weren't placed.
We can't drop these values as they give information on candidates who weren't placed.
Imputing values with mean/median would be very wrong because candidates who weren't placed can't get salary.
So we impute these values with 0.

Data Cleaning
"""

df = df.drop('sl_no',axis=1)

"""Imputing null values in Salary column with 0"""

df['salary'].fillna(0,inplace=True)
df['salary'].isnull().sum()

"""Checking for outliers"""

plt.figure(figsize = (15, 15))

ax=plt.subplot(321)
plt.boxplot(df['ssc_p'])
ax.set_title('Secondary Education percentage- 10th Grade')

ax=plt.subplot(322)
plt.boxplot(df['hsc_p'])
ax.set_title('Higher Secondary Education percentage- 12th Grade')

ax=plt.subplot(323)
plt.boxplot(df['degree_p'])
ax.set_title('UG Degree Percentage')

ax=plt.subplot(324)
plt.boxplot(df['etest_p'])
ax.set_title('Employability test percentage ( conducted by college)')

ax=plt.subplot(325)
plt.boxplot(df['mba_p'])
ax.set_title('MBA percentage')

"""Here we can see that only hsc_p column has outliers."""

Q1 = df['hsc_p'].quantile(0.25)
Q3 = df['hsc_p'].quantile(0.75)
IQR = Q3 - Q1   

df[(df['hsc_p'] <= Q1 - 1.5 * IQR) | (df['hsc_p'] >= Q3 + 1.5 *IQR)]

"""Handling with Catagorical Data"""

# we convert object type data into numerical datatype
    

df['status']=df['status'].astype('category')
df['workex']=df['workex'].astype('category')
df['hsc_b']=df['hsc_b'].astype('category')
df['ssc_b']=df['ssc_b'].astype('category')

#check how many unique data in these dataframe

print(df['gender'].unique())
print(df['status'].unique())
print(df['workex'].unique())
print(df['hsc_b'].unique())
print(df['ssc_b'].unique())

# Replace the value in 0,1 or quantitative parameters

df["status"].replace(['Placed',"Not Placed"],[1,0],inplace=True)

df['workex'].replace(to_replace ="Yes", value =1,inplace=True) 
df['workex'].replace(to_replace ="No", value =0,inplace=True)

df["gender"].dtype

# show the percentage of male or female
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
gender = ['Male','Female']
students = [139,76]
ax.pie(students, labels = gender,autopct='%1.2f%%',colors = ["#1f77b4", "#ff7f0e"])
plt.title('Pie chart ')
plt.show()

#show the no. of student how placed or not placed.

print("Number of not placed Student "+ str(len(df[df["status"]==0])))
print("Number of placed Student "+ str(len(df[df["status"]=="Placed"])))

plt.bar([0],height=len(df[df["status"]==0]))
plt.bar([1],height=len(df[df["status"]==1]))

plt.xlabel("Status")
plt.ylabel("Count")

plt.xticks(np.arange(2), ('Not placed', 'Placed'))
plt.title("No of Student placed\n")
plt.show()

#average percentage of all education qualification
values = [(df['ssc_p'].mean()),(df['hsc_p'].mean()),(df['mba_p'].mean()),(df['degree_p'].mean())]
print('scc_p mean = ' +str(df['ssc_p'].mean()))
print('hsc_p mean = ' +str(df['hsc_p'].mean()))
print('mba_p mean = ' +str(df['mba_p'].mean()))
print('degree_p mean = ' +str(df['degree_p'].mean()))
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
names = ['ssc_p','hsc_p','mba_p','degree_p']
ax.set_ylabel('Average percentages')
ax.set_title('Average Percentage')
ax.bar(names,values,width = 0.5,color=["#2ca02c"])
plt.show()

"""Which factor influenced a candidate in getting placed?
or

Does percentage matters for one to get placed?
"""

#show the relation between diffrent qualification placement status usinng correlation.

print('ssc_p to placement ', round(df['status'].corr(df['ssc_p'])*100,1),'%')
print('hsc_p to placement ', round(df['status'].corr(df['hsc_p'])*100,1),'%')
print('mba_p to placement ', round(df['status'].corr(df['mba_p'])*100,1),'%')
print('degree_p to placement ', round(df['status'].corr(df['degree_p'])*100,1),'%')
print('etest_p to placement ', round(df['status'].corr(df['etest_p'])*100,1),'%')

print('workexp to placement ', round(df['status'].corr(df['workex'])*100,1),'%')

df_grade = df.groupby(['status']).mean()[['hsc_p', 'degree_p', 'mba_p']].reset_index()
df_grade.head()

# which specialisation is more demand in campus selection

plt.bar([1],height=len(df[df["specialisation"]=="Mkt&HR"]))
plt.bar([0],height=len(df[df["specialisation"]=="Mkt&Fin"]))
plt.xlabel("specialisation in Mkt&Fin and Mkt&HR")
plt.ylabel("no.of specialisation")

print("specialisation in Mkt&Fin "+ str(len(df[df["specialisation"]=="Mkt&Fin"])))
print("specialisation in Mkt&HR "+ str(len(df[df["specialisation"]=="Mkt&HR"])))
plt.xticks(np.arange(2), ('Mkt&Fin', 'Mkt&HR'))
plt.title("which specialisation is more demand in campus selection\n")
plt.show()

df

"""DATA PREPROCESSING

Label Encoding (for the categorical columns having only two types of classes)
"""

from sklearn.preprocessing import LabelEncoder
cols = ['workex','specialisation','status','ssc_b','hsc_b']
df[cols]=df[cols].apply(LabelEncoder().fit_transform)
df.head()

"""One-hot Encoding (for categorical columns having more than two types of classes)"""

dummy_hsc_s=pd.get_dummies(df['hsc_s'],prefix='hsc')
dummy_degree_t=pd.get_dummies(df['degree_t'],prefix='degree')

df1=pd.concat([df,dummy_hsc_s,dummy_degree_t],axis=1)
df1.drop(['hsc_s','degree_t','hsc_b','ssc_b','hsc_s','degree_t'],axis=1,inplace=True)
df1.head(10)

df1.to_csv("/content/drive/MyDrive/campus placement/ml-with-python-course-project 2/preprocess_data.csv")

df1